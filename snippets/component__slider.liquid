<!-- snippets/component__slider.liquid -->
{% comment %} 
  Standard slider component.

  Accepts:
    - show_arrows: boolean to show arrows, if false then arrows may be shown if needed
    - outer_class: classes to be applied to outer div
    - container_class: classes to be applied to inner div
    - slider_size: count of slides
    - slides: liquid object of slider content
  
  Usage:
    {% capture slides %}
      {% for block in section.blocks %}
        ...
      {% endfor %}
    {% endcapture %}
    {% render 'component__slider',
      show_arrows: true,
      outer_class: 'px-4',
      container_class: 'px-4',
      slider_size: section.blocks.size,
      slides: slides %} 
  
  Possible enhancements: 
    - Fix bug where users may have to click twice at end of slider.
{% endcomment %}

<div class="flex flex-wrap
  {{ outer_class }}">
  <div class="relative w-full"
    x-data="{
      index: 0,
      index_size: {{ slider_size }},
      show_arrows: false,
      isOverflown(element) {
        return element.scrollWidth > element.clientWidth;
      },

      scrollToIndex(index_scroll) {
        let slider = this.$refs.slider;
        let currentSlide = slider.querySelector('[data-slide=&quot;' + index_scroll + '&quot;]');
        if (currentSlide) {
          let sliderWidth = slider.offsetWidth;
          let currentSlidePosition = currentSlide.offsetLeft;
          let currentSlideWidth = currentSlide.offsetWidth;
          let centerPosition = currentSlidePosition + currentSlideWidth / 2 - sliderWidth / 2;
      
          slider.scrollTo({
            top: 0,
            left: centerPosition,
            behavior: 'smooth'
          });
        }
      },

      scrollNext() {
        let slider = this.$refs.slider;
        let scrolledToEnd = (el) => {
          if(el.scrollLeft + el.offsetWidth == el.scrollWidth){
            return true;
          } else {
            return false;
          } 
        }
        
        if(this.index >= this.index_size || scrolledToEnd(slider)){
          this.index = 0
          this.scrollToIndex(0);
        } else {
          this.index++
          this.scrollToIndex(this.index);
        }
      },
      
      scrollBack() {
        let slider = this.$refs.slider;
        if(this.index <= 0 || slider.scrollLeft == 0){
          this.index = this.index_size;
          this.scrollToIndex(this.index);
        } else {
          this.index--
          this.scrollToIndex(this.index);
        }
      }
    }">
    
    {% comment %}slides{% endcomment %}
    <div class="whitespace-nowrap md:snap-x scroll-smooth hidescrollbar inline-flex w-full px-4 overflow-x-auto overflow-y-hidden"
      style="
        column-gap: {{ settings.layout_gap_size }}px;
        row-gap: {{ settings.layout_gap_size | times: 1.5 }}px;"
      x-init="setTimeout(function(){ if (isOverflown($el)) show_arrows = true}, 600);"  
      x-ref="slider">
      {{ slides }}
    </div>

    {% comment %}arrows{% endcomment %}
    <div class="md:flex justify-end hidden gap-4 pt-4 {{ settings.layout_horizontal }}">
      <div {% unless show_arrows == 'true' %}x-show="show_arrows"{% endunless %}>
        <button class="btn btn--plain btn--small"
          title="{{ 'general.media.previous_slide' | t }}"
          {% if settings.enable_animations %}
            x-transition:enter="animation-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="animation-300"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
          {% endif %}
          x-cloak
          @click="scrollBack();">
          {% render 'component__icon', icon: 'arrow-left', size: '20', class: '' %}
        </button>
      </div>
      <div {% unless show_arrows == 'true' %}x-show="show_arrows"{% endunless %}>
        <button class="btn btn--plain btn--small"
          title="{{ 'general.media.next_slide' | t }}"
          {% if settings.enable_animations %}
            x-transition:enter="animation-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="animation-300"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
          {% endif %}
          x-cloak
          @click="scrollNext();">
          {% render 'component__icon', icon: 'arrow-right', size: '20', class: '' %}
        </button>
      </div>
    </div>
    
  </div>
</div>