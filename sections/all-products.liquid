{% comment %} {{ 'product-popup.css' |  asset_url |  stylesheet_tag}}  {% endcomment %}
{{ 'all-products.css' |  asset_url |  stylesheet_tag}} 
{{ 'product-popup.css' |  asset_url |  stylesheet_tag}} 
{{ 'bundle.css' |  asset_url |  stylesheet_tag}} 

<div class="collection-div" style="background-color: {{ section.settings.background_color }};">

<div class="theme-img">
  {% if section.settings.theme_img %}
    <img src="{{ section.settings.theme_img | img_url }}" alt="Theme Image">
  {% endif %}
</div>

<div class="carousel-container">
  {% comment %} <button class="product-list-left productlist-carousel-btn">&lt;</button> 
  <button class="product-list-right productlist-carousel-btn">&gt;</button>  {% endcomment %}
<div class="products-list">
 
  {% for product in section.settings.collection_id.products %}
    {% assign sizes = '' %}
    {% assign variants = '' %}

    {% for variant in product.variants %}
      {% assign sizes = sizes | append: variant.title %}
      {% assign variants = variants | append: variant.id %}
      {% unless forloop.last %}
        {% assign sizes = sizes | append: ',' %}
        {% assign variants = variants | append: ',' %}
      {% endunless %}
    {% endfor %}



    <div class="product" 
    data-id="{{ product.id }}"
    data-handle="{{ product.handle }}" 
    data-title="{{ product.title }}" 
    data-price="{{ product.price }}" 
    data-compare-at-price="{{ product.compare_at_price }}"
    data-main-image="{{ product.featured_image | img_url: 'original' }}"
    data-images="{% for image in product.images %}{{ image.src | img_url: 'original' }}{% unless forloop.last %},{% endunless %}{% endfor %}"
    data-sizes="{{ sizes }}"
    data-variants="{{ variants }}"
    data-product-review-images='{{ product.metafields.custom.review_images.value | json }}'
    onclick="showPopup(this)">

    <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">

    <div class="collection-product-details">

    <div class="all-products-ratings">
     <i class="fa-solid fa-star rating-star"></i>
     <i class="fa-solid fa-star rating-star"></i>
     <i class="fa-solid fa-star rating-star"></i>
     <i class="fa-solid fa-star rating-star"></i>
     <i class="fa-solid fa-star rating-star"></i>
     <p class="rating-text">4.8(121)</p>
   </div>
   


 <h3 class="collection-product-title">{{ product.title }}</h3>
 <h4 class="collection-product-type">{{ product.type }}</h4>
 <div class="collection-product-price">
 <p class="collection-price-normal">${{ product.price | divided_by: 100.0  }}</p>
 <p class="collection-price-compare">${{ product.compare_at_price | divided_by: 100.0  }}</p>
 
 </div>
 </div>
</div>
{% endfor %}
</div>
</div>
</div>

{% comment %} PRODUCT-popup... {% endcomment %}

<div class="product-popup-bg">
  <div class="product-popup">
    <div class="product-close-btn">{% render 'icon-close-small' %}</div>
    <div class="product-carousel">
            <button class="product-img-left"><</button>
            <button class="product-img-right">></button>
        </div>
    <div class="product-details">
      <div class="popup-ratings">
        <i class="fa-solid fa-star popup-rating-star"></i>
        <i class="fa-solid fa-star popup-rating-star"></i>
        <i class="fa-solid fa-star popup-rating-star"></i>
        <i class="fa-solid fa-star popup-rating-star"></i>
        <i class="fa-solid fa-star popup-rating-star"></i>
        <p class="rating-text">4.8(121)</p>
      </div>
      <h2 id="popup-product-name" class="popup-product-name">Product Name</h2>
      <p id="popup-product-subhead" class="popup-product-subhead">Anime Mesh Shorts</p>
      <div id="popup-product-price" class="popup-product-price">
        <p class="normal">$35 USD</p>
        <p class="striked">$40 USD</p>
      </div>
      <div class="choose-size">
        <p>Choose sizes:</p>
        <h4 id="size-btn">Size Chart</h4>
      </div>
      <div class="size-popup">
        {% render 'size-chart' %}
      </div>
      <div class="size-options">
        <div class="size">XS</div>
        <div class="size">S</div>
        <div class="size">M</div>
        <div class="size">L</div>
        <div class="size">XL</div>
        <div class="size">2XL</div>
        <div class="size">3XL</div>
      </div>
      <button id="shop-now-btn" class="shop-now">SHOP NOW</button>
    </div>
    <div class="review-images">
         

    </div>
  </div>
</div>

{% comment %} BUNDLE.... {% endcomment %}

<div id="bundle-bg" class="bundle-bg"></div>
    <div class="bundle-container">
        <div id="bundle-close-btn" class="bundle-close-btn">{% render 'icon-close-small' %}</div>
        <div class="bundle-heading">
            <h3>Build your Bundle :</h3>
            <p>Pick 3 to get 1 free</p>
        </div>
    
        <div class="bundle-tracker-container">
            <div class="bundle-tracker-headings">
                <p class="tracker-heading1">Buy 2</p>
                <p class="tracker-heading2">Buy 3</p>
                <p class="tracker-heading3">Buy 4</p>
            </div>
            <div class="bundle-tracker">
                <div class="bundle-tracker-path">
                    <div id="level-1" class="bundle-tracker-level">1</div>
                    <div id="level-2" class="bundle-tracker-level">2</div>
                    <div id="level-3" class="bundle-tracker-level">3</div>
    
                </div>
                <div id="buy-1" class="bundle-tracker-points">Buy 1</div>
                <div id="buy-2" class="bundle-tracker-points">Save 10%</div>
                <div id="buy-3" class="bundle-tracker-points">Free shipping $99+</div>
                <div id="buy-4" class="bundle-tracker-points">GET FREE</div>
            </div>
        </div>
    
        <div class="bundle-products">
            <div class="b-product">
            <div id="bundle-product-1" class="bundle-product bundle-product-1">
                 <button id="bundle-close-btn-1" class="bundle-product-close-btn">
                    {% render 'icon-close-small' %}
                </button>
            </div>
            <p id="b-name1" class="b-product-name">product name</p>
                <p id="b-size1" class="b-product-size">procuct size</p>
            </div>

            <div class="b-product">
            <div id="bundle-product-2"  class="bundle-product bundle-product-2">
                <button id="bundle-close-btn-2" class="bundle-product-close-btn">
                    {% render 'icon-close-small' %}
                </button>
            </div>
            <p id="b-name2" class="b-product-name">product name</p>
            <p id="b-size2" class="b-product-size">procuct size</p>
            </div>

            <div class="b-product">
            <div id="bundle-product-3" class="bundle-product bundle-product-3">
                 <button id="bundle-close-btn-3" class="bundle-product-close-btn">
                    {% render 'icon-close-small' %}
                </button> 
               
            </div>
            <p id="b-name3" class="b-product-name">product name</p>
            <p id="b-size3" class="b-product-size">procuct size</p>
            </div>

            <div class="b-product">
            <div id="bundle-product-4" class="bundle-product bundle-product-4">
                <div class="product4-div"><span class="free-product-text line1">PICK</span><span id="picks-left" class="free-product-text line2">1</span></div>
                <p class="free-product-text line3">MORE TO</p>
                <span class="free-product-bg-white free-product-text line4">GET 1 Free</span>
                 <button id="bundle-close-btn-4" class="bundle-product-close-btn">
                    {% render 'icon-close-small' %}
                </button> 
               
            </div>
            <p id="b-name4" class="b-product-name">product name</p>
            <p id="b-size4" class="b-product-size">procuct size</p>
            </div>
        </div>

    
        <div class="bundle-price">
            <h6>Your price:</h6>
            <p id="bundle-total" class="normal">$0.00</p>
            <p id="bundle-saved" class="striked">$0.00</p>
            <h4 id="bundle-discount">Save 40% Off</h4>
        </div>
    
        <button id="bundle-cart-btn" class="bundle-cart-btn">Add to Cart</button>
    
        <div class="bundle-baseline-text">
  <h6> 100% satisfaction guaranteed</h6>
</div>
    </div>
    

<script>

// MAIN JAVASCRIPT...

let sizeBtn = document.querySelector("#size-btn");
let sizeCloseBtn = document.querySelector(".size-chart-close-btn");
let sizePopup = document.querySelector(".size-popup");
let productPopupBG = document.querySelector(".product-popup-bg");
let popupCloseBtn = document.querySelector(".product-close-btn");


let productData = {
    id: null,
    handle: null,
    title: null,
    price: null,
    compareAtPrice: null,
    images: [],
    sizes: [],
    mainImage: null,
    selectedSize: null,
};

let bundleProducts = [];

let bundleBg = document.querySelector(".bundle-bg");
let bundleContainer = document.querySelector(".bundle-container");
let bundleCloseBtn = document.querySelector("#bundle-close-btn");

console.log('Initial bundleBg display:', getComputedStyle(bundleBg).display);
console.log('Initial bundleContainer bottom:', getComputedStyle(bundleContainer).bottom);

bundleContainer.addEventListener("click", (event) => {
    console.log("bundleContainer clicked");
    if (event.target !== bundleCloseBtn && !bundleCloseBtn.contains(event.target)) {
        bundleBg.style.display = "flex";
        bundleContainer.style.bottom = "0%";
        console.log('After click bundleBg display:', getComputedStyle(bundleBg).display);
        console.log('After click bundleContainer bottom:', getComputedStyle(bundleContainer).bottom);
    }
});

bundleCloseBtn.addEventListener("click", (event) => {
    console.log("bundleCloseBtn clicked");
    event.stopPropagation(); // Stop the event from bubbling up to bundleContainer
    bundleBg.style.display = "none";
    if (window.innerWidth >= 319 && window.innerWidth <= 700) {
            bundleContainer.style.bottom = "-35%";
        } else if (window.innerWidth >= 701 && window.innerWidth <= 1200){
            bundleContainer.style.bottom = "-45%";
        }else {
            bundleContainer.style.bottom = "-75%"; // Or any default value you prefer
        }
    console.log('After close bundleBg display:', getComputedStyle(bundleBg).display);
    console.log('After close bundleContainer bottom:', getComputedStyle(bundleContainer).bottom);
}); 



function updatePicksLeft() {
    const picksLeftElement = document.getElementById("picks-left");

    const line1Element = document.querySelector('.line1');
    const line2Element = document.querySelector('.line2');
    const line3Element = document.querySelector('.line3');
    const line4Element = document.querySelector('.line4');
    const picksLeft = 3 - bundleProducts.length;
    picksLeftElement.textContent = picksLeft.toString();

    const freeProductTextElements = document.querySelectorAll('.free-product-text');
    freeProductTextElements.forEach(element => {
        if (bundleProducts.length === 4) {
            element.style.display = 'none';
        } else {
            element.style.display = 'block';
        }
    });

    if (bundleProducts.length === 0){
        if (line2Element) line3Element.textContent = 'SHORTS';
    }else if (bundleProducts.length === 3) {
        if (line1Element) line2Element.style.display = 'none';
        if (line2Element) line1Element.textContent = 'ADD';
        if (line2Element) line3Element.textContent = 'FREE';
        if (line3Element) line4Element.textContent = 'SHORTS';
    } else{
        if (line2Element) line3Element.textContent = 'MORE TO';
        if (line3Element) line4Element.textContent = 'GET 1 FREE';
    }
}



function showPopup(productElement) {
    let bundleContainer = document.querySelector(".bundle-container");
    bundleContainer.style.display = "none";
    console.log(productElement);
    const sizes = productElement.getAttribute('data-sizes') ? productElement.getAttribute('data-sizes').split(',') : [];
    const variants = productElement.getAttribute('data-variants') ? productElement.getAttribute('data-variants').split(',') : [];
   
    const productReviewImages = JSON.parse(productElement.getAttribute('data-product-review-images'));

    console.log("these are the review images:", productReviewImages);

    productData = {
        id: productElement.getAttribute('data-id'),
        handle: productElement.getAttribute('data-handle'),
        title: productElement.getAttribute('data-title'),
        price: productElement.getAttribute('data-price'),
        compareAtPrice: productElement.getAttribute('data-compare-at-price'),
        images: productElement.getAttribute('data-images') ? productElement.getAttribute('data-images').split(',') : [],
        sizes: sizes,
        variants: variants,
        mainImage: productElement.getAttribute('data-main-image') || '',
        selectedSize: null,
        selectedVariantId: null
    };
    console.log(productData);
    console.log('Product Sizes:', productData.sizes);
    console.log('Product Variants:', productData.variants);

    let productPopupBG = document.querySelector(".product-popup-bg");
    let popupProductName = document.querySelector("#popup-product-name");
    let popupProductPrice = document.querySelector(".popup-product-price .normal");
    let popupProductComparePrice = document.querySelector(".popup-product-price .striked");
    let productCarousel = document.querySelector(".product-carousel");
    let sizeOptions = document.querySelector(".size-options");
    let reviewImagesContainer = document.querySelector(".review-images");

    if (!productPopupBG || !popupProductName || !popupProductPrice || !popupProductComparePrice || !productCarousel || !sizeOptions || !reviewImagesContainer) {
        console.error('One or more popup elements not found.');
        return;
    }

    productPopupBG.style.display = "flex";
    popupProductName.innerHTML = productData.title;
    popupProductPrice.innerHTML = `$${(productData.price / 100).toFixed(2)}`;
    popupProductComparePrice.innerHTML = `$${(productData.compareAtPrice / 100).toFixed(2)}`;

    // Clear existing carousel images
    productCarousel.querySelectorAll('img.popup-img').forEach(img => img.remove());

    // Add images to the carousel if available
    if (productData.images.length > 0) {
        productData.images.forEach((carouselSrc) => {
            carouselSrc = carouselSrc.trim();
            if (carouselSrc) {
                let carouselImg = document.createElement('img');
                carouselImg.src = carouselSrc;
                carouselImg.className = 'popup-img';
                productCarousel.appendChild(carouselImg);
            }
        });
    } else {
        console.error('No images found for this product.');
    }

    // Clear existing size options
    sizeOptions.innerHTML = '';

    // Add new size options
    if (productData.sizes.length > 0) {
        productData.sizes.forEach(size => {
            let sizeDiv = document.createElement('div');
            sizeDiv.className = 'size';
            sizeDiv.textContent = size;
            sizeDiv.addEventListener('click', () => {
                selectSize(size);
            });
            sizeOptions.appendChild(sizeDiv);
        });
        productData.selectedSize = productData.sizes[0];
        selectSize(productData.selectedSize);
    } else {
        let noSizesDiv = document.createElement('div');
        noSizesDiv.className = 'size';
        noSizesDiv.textContent = 'No sizes available';
        sizeOptions.appendChild(noSizesDiv);
    }

    // Clear existing review images
    reviewImagesContainer.innerHTML = '';

    // Add new review images
    if (productReviewImages && productReviewImages.length > 0) {
        productReviewImages.forEach((reviewSrc) => {
            let revImg = document.createElement('img');
            revImg.src = reviewSrc;
            revImg.className = 'review-img';
            reviewImagesContainer.appendChild(revImg);
        });
    } else {
        console.error('No review images found for this product.');
    }

    // Initialize carousel after adding images
    initializeCarousel();
}


document.addEventListener('DOMContentLoaded', () => {
    // Other initialization code
    updatePicksLeft(); // Add this line
});





function selectSize(size) {
    document.querySelectorAll('.size').forEach(sizeDiv => {
        sizeDiv.classList.remove('selected');
    });

    const selectedSizeDiv = Array.from(document.querySelectorAll('.size')).find(div => div.textContent.trim() === size);
    if (selectedSizeDiv) {
        selectedSizeDiv.classList.add('selected');
    }

    productData.selectedSize = size;

    // Find the corresponding variant ID for the selected size
    const sizeIndex = productData.sizes.indexOf(size);
    if (sizeIndex !== -1) {
        productData.selectedVariantId = productData.variants[sizeIndex];
    } else {
        productData.selectedVariantId = null;
    }

    console.log('Selected size:', size);
    console.log('Selected variant ID:', productData.selectedVariantId);
    console.log('Updated productData:', productData);
}




function initializeCarousel() {
    const productCarousel = document.querySelector(".product-carousel");
    const leftButton = productCarousel.querySelector(".product-img-left");
    const rightButton = productCarousel.querySelector(".product-img-right");
    const images = productCarousel.querySelectorAll(".popup-img");

    if (images.length === 0) {
        console.error('No images found in the carousel.');
        return;
    }

    let currentIndex = 0;

    function showImage(index) {
        images.forEach((img, i) => {
            img.style.display = (i === index) ? 'block' : 'none';
        });
    }

    showImage(currentIndex);

    leftButton.addEventListener("click", () => {
        currentIndex = (currentIndex > 0) ? currentIndex - 1 : images.length - 1;
        showImage(currentIndex);
    });

    rightButton.addEventListener("click", () => {
        currentIndex = (currentIndex < images.length - 1) ? currentIndex + 1 : 0;
        showImage(currentIndex);
    });
}



sizeBtn.addEventListener("click", () => {
    sizePopup.style.display = "flex";
});

sizeCloseBtn.addEventListener("click", () => {
    sizePopup.style.display = "none";
});

popupCloseBtn.addEventListener("click", () => {
    productPopupBG.style.display = "none";
});


document.addEventListener('DOMContentLoaded', () => {
    const productPopupBG = document.querySelector(".product-popup-bg");
    const productPopup = document.querySelector(".product-popup");

    if (productPopupBG) {
        productPopupBG.addEventListener("click", (event) => {
            // Hide product-popup-bg if clicked outside of product-popup
            if (!productPopup.contains(event.target)) {
                productPopupBG.style.display = "none";
            }
        });
    } else {
        console.error('productPopupBG not found in the DOM');
    }
});



document.addEventListener('DOMContentLoaded', function() {
    const shopNowButton = document.getElementById('shop-now-btn');
    const bundleBg = document.getElementById('bundle-bg');
    const bundleContainer = document.querySelector(".bundle-container");

    console.log('shopNowButton:', shopNowButton);
    console.log('bundleBg:', bundleBg);
    console.log(bundleProducts);

    if (shopNowButton && bundleBg) {
        shopNowButton.addEventListener('click', function() {
            console.log("button was clicked");

            if (!productData.selectedSize && productData.sizes.length > 0) {
                // Automatically select the first size
                selectSize(productData.sizes[0]);
            }
            console.log(bundleBg);
            bundleBg.style.display = 'flex';
            bundleContainer.style.display = "flex";
            bundleContainer.style.bottom = "0%" ;
        });
    } else {
        console.error('shopNowButton or bundleBg not found in the DOM');
    }
  
});




// Define the bundleBg and bundleContainer
document.addEventListener('DOMContentLoaded', () => {
    const bundleBg = document.querySelector(".bundle-bg");
    const bundleContainer = document.querySelector(".bundle-container");

 
    
    // Check if bundleBg and bundleContainer exist
    if (bundleBg) {
        bundleBg.addEventListener("click", () => {
            // Hide bundleBg when clicking outside of bundleContainer
            if (!bundleContainer.contains(event.target)) {
                bundleBg.style.display = "none";
                // bundleContainer.style.bottom = "-75%";
                if (window.innerWidth >= 319 && window.innerWidth <= 700) {
            bundleContainer.style.bottom = "-35%";
        } else if (window.innerWidth >= 701 && window.innerWidth <= 1200){
            bundleContainer.style.bottom = "-45%";
        }else {
            bundleContainer.style.bottom = "-75%"; // Or any default value you prefer
        }
            }
        });
    } else {
        console.error('bundleBg not found in the DOM');
    }




    if (bundleContainer) {
        bundleContainer.addEventListener("click", (event) => {
            // Stop the click event from propagating to bundleBg
            event.stopPropagation();
        });
    } else {
        console.error('bundleContainer not found in the DOM');
    }

    const shopNowButton = document.getElementById('shop-now-btn');
    if (shopNowButton) {
        shopNowButton.addEventListener('click', function() {
            console.log("button was clicked");
            if (bundleBg) {
                bundleBg.style.display = 'flex'; 
                productPopupBG.style.display = "none";
            }
        });
    } else {
        console.error('shopNowButton not found in the DOM');
    }
});







document.addEventListener('DOMContentLoaded', () => {
    const shopNowBtn = document.getElementById('shop-now-btn');
    const bundleProductElements = [
        document.getElementById('bundle-product-1'),
        document.getElementById('bundle-product-2'),
        document.getElementById('bundle-product-3'),
        document.getElementById('bundle-product-4'),
    ];

    shopNowBtn.addEventListener('click', () => {
        // Ensure productData is correctly populated before adding
        const productDataToAdd = {
            mainImage: document.querySelector('.product-carousel img').src,
            price: parseFloat(document.querySelector('.popup-product-price .normal').textContent.replace('$', '').replace(',', '')) * 100,
            selectedVariantId: productData.selectedVariantId,
            productName: productData.title,
            productSize: productData.selectedSize
        };

        console.log(productData);

        if (bundleProducts.length < 4) {
            bundleProducts.push(productDataToAdd);

            bundleProducts.forEach((product, index) => {
                if (index < bundleProductElements.length) {
                    bundleProductElements[index].style.backgroundImage = `url(${product.mainImage})`;
                }
            });

            updateBackgroundColors(bundleProducts.length);
            updateCloseButtons(); // Update close buttons visibility
            updateBundleTotal(); // Update total
            updateBundleNames();
            updateBundleSizes();
            updatePicksLeft();
        } else {
            alert("You already have 4 items in your bundle");
        }
    });
});





function updateBackgroundColors(count) {
    const buy1 = document.getElementById('buy-1');
    const level1 = document.getElementById('level-1');
    const buy2 = document.getElementById('buy-2');
    const level2 = document.getElementById('level-2');
    const buy3 = document.getElementById('buy-3');
    const level3 = document.getElementById('level-3');
    const buy4 = document.getElementById('buy-4');
   

    // Reset background color, text color, and border for all elements
    [buy1, level1, buy2, level2, buy3, level3, buy4].forEach(el => {
        if (el) {
            el.style.backgroundColor = '';
            el.style.color = '';
            el.style.border = ''; // Reset border
        }
    });

    // Apply new background color, text color, and border based on the number of items in the bundle
    if (count >= 1) {
        if (buy1) {
            buy1.style.backgroundColor = '#ffa500';
            buy1.style.color = '#000000';
        }
    }
    if (count >= 2) {
        if (level1) {
            level1.style.backgroundColor = '#ffa500';
            level1.style.color = '#000000';
            level1.style.border = 'none'; // Remove border
        }
        if (buy2) {
            buy2.style.backgroundColor = '#ffa500';
            buy2.style.color = '#000000';
        }
    }
    if (count >= 3) {
        if (level2) {
            level2.style.backgroundColor = '#ffa500';
            level2.style.color = '#000000';
            level2.style.border = 'none'; // Remove border
        }
        if (buy3) {
            buy3.style.backgroundColor = '#ffa500';
            buy3.style.color = '#000000';
        }
    }
    if (count >= 4) {
        if (level3) {
            level3.style.backgroundColor = '#ffa500';
            level3.style.color = '#000000';
            level3.style.border = 'none'; // Remove border
        }
        if (buy4) {
            buy4.style.backgroundColor = '#ffa500';
            buy4.style.color = '#000000';
        }
    }
}

function updateCloseButtons() {
    const closeButtons = [
        document.getElementById('bundle-close-btn-1'),
        document.getElementById('bundle-close-btn-2'),
        document.getElementById('bundle-close-btn-3'),
        document.getElementById('bundle-close-btn-4')
    ];

    closeButtons.forEach((btn, index) => {
        if (btn) {
            if (index < bundleProducts.length) {
                btn.style.position = 'absolute';
                btn.style.display = 'flex'; // Make sure the button is visible
            } else {
                btn.style.display = 'none'; // Hide buttons if they are not needed
            }
        }
    });
}


document.addEventListener('DOMContentLoaded', () => {
    const closeButtons = [
        document.getElementById('bundle-close-btn-1'),
        document.getElementById('bundle-close-btn-2'),
        document.getElementById('bundle-close-btn-3'),
        document.getElementById('bundle-close-btn-4')
    ];

    closeButtons.forEach((btn, index) => {
        if (btn) {
            btn.addEventListener('click', () => {
                // Remove the product at the index from the bundleProducts array
                bundleProducts.splice(index, 1);

                // Update the UI to reflect the change
                updateBundleProductsUI();
            });
        }
    });
});




function updateBundleProductsUI() {
    const bundleProductElements = [
        document.getElementById('bundle-product-1'),
        document.getElementById('bundle-product-2'),
        document.getElementById('bundle-product-3'),
        document.getElementById('bundle-product-4')
    ];

    // Clear the background images and reset styles
    bundleProductElements.forEach((element) => {
        if (element) {
            element.style.backgroundImage = '';
        }
    });

    // Update the UI based on the remaining products
    bundleProducts.forEach((product, index) => {
        if (index < bundleProductElements.length) {
            bundleProductElements[index].style.backgroundImage = `url(${product.mainImage})`;
        }
    });

    // Hide any extra elements
    bundleProductElements.slice(bundleProducts.length).forEach((element) => {
        if (element) {
            element.style.backgroundImage = '';
        }
    });

    // Update the close buttons
    updateCloseButtons();
    updateBundleTotal();
    updateBackgroundColors(bundleProducts.length);
    updateBundleNames();
    updateBundleSizes();
    updatePicksLeft();
}





function updateCloseButtons() {
    const closeButtons = [
        document.getElementById('bundle-close-btn-1'),
        document.getElementById('bundle-close-btn-2'),
        document.getElementById('bundle-close-btn-3'),
        document.getElementById('bundle-close-btn-4')
    ];

    closeButtons.forEach((btn, index) => {
        if (btn) {
            if (index < bundleProducts.length) {
                btn.style.position = 'absolute';
                btn.style.display = 'flex'; // Make sure the button is visible
            } else {
                btn.style.display = 'none'; // Hide buttons if they are not needed
            }
        }
    });
}



function updateBundleTotal() {
    const bundleTotalElement = document.getElementById('bundle-total');
    const bundleSavedElement = document.getElementById('bundle-saved');
    const bundleDiscountElement = document.getElementById('bundle-discount');
    console.log(bundleTotalElement);
    console.log(bundleSavedElement);
    console.log(bundleDiscountElement);

    // Debugging
    console.log('bundleProducts:', bundleProducts);
    console.log('bundleTotalElement:', bundleTotalElement);
    console.log('bundleSavedElement:', bundleSavedElement);
    console.log('bundleDiscountElement:', bundleDiscountElement);

    if (bundleTotalElement && bundleSavedElement && bundleDiscountElement) {
        // Handle case with no products
        if (bundleProducts.length === 0) {
            bundleTotalElement.innerText = '';
            bundleSavedElement.style.display = 'none';
            bundleDiscountElement.style.display = 'none';
        } else if (bundleProducts.length === 1) {
            // Handle case with a single product
            const productPrice = bundleProducts[0].price;
            bundleTotalElement.innerText = `$${(productPrice / 100).toFixed(2)}`;
            
            // Hide #bundle-saved and #bundle-discount
            bundleSavedElement.style.display = 'none';
            bundleDiscountElement.style.display = 'none';
        } else if (bundleProducts.length === 2) {
            // Handle case with two products
            const totalPrice = bundleProducts.reduce((total, product) => total + product.price, 0);
            const discount = 0.10; // 10% discount
            const discountedTotal = totalPrice - (totalPrice * discount);

            // Update #bundle-saved to show the total price
            bundleSavedElement.innerText = `$${(totalPrice / 100).toFixed(2)}`;

            // Update #bundle-total to show the discounted total price
            bundleTotalElement.innerText = `$${(discountedTotal / 100).toFixed(2)}`;

            // Show #bundle-saved and #bundle-discount
            bundleSavedElement.style.display = '';
            bundleDiscountElement.style.display = '';
            bundleDiscountElement.innerText = '10% off';
        } else if (bundleProducts.length === 3) {
            // Handle case with three products
            const totalPrice = bundleProducts.reduce((total, product) => total + product.price, 0);

            // Show the total price in #bundle-total
            bundleTotalElement.innerText = `$${(totalPrice / 100).toFixed(2)}`;

            // Hide #bundle-saved and set #bundle-discount to 'free shipping'
            bundleSavedElement.style.display = 'none';
            bundleDiscountElement.style.display = '';
            bundleDiscountElement.innerText = 'Free shipping';
        } else if (bundleProducts.length === 4) {
            // Handle case with four products
            const totalPrice = bundleProducts.reduce((total, product) => total + product.price, 0);

            // Show the total price of the first 3 products in #bundle-total
            const totalPriceFirstThree = bundleProducts.slice(0, 3).reduce((total, product) => total + product.price, 0);
            bundleTotalElement.innerText = `$${(totalPriceFirstThree / 100).toFixed(2)}`;

            // Show the total price of all 4 products in #bundle-saved
            bundleSavedElement.innerText = `$${(totalPrice / 100).toFixed(2)}`;

            // Set #bundle-discount to 'GET FREE'
            bundleSavedElement.style.display = '';
            bundleDiscountElement.style.display = '';
            bundleDiscountElement.innerText = 'GET FREE';
        } else {
            // Handle case with more than 4 products, if needed
        }
    } else {
        console.error('One or more elements not found.');
    }
}



document.addEventListener('DOMContentLoaded', () => {
    const cartBtn = document.getElementById('bundle-cart-btn');
    
    if (cartBtn) {
        console.log('Adding event listener to cart button');
        
        cartBtn.addEventListener('click', async () => {
            console.log("Cart button was clicked");
            
            const lineItems = bundleProducts.map(product => ({
                id: product.selectedVariantId,
                quantity: 1 // Default quantity of 1 for each item
            }));

            try {
                const response = await fetch('/cart/add.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ items: lineItems })
                });

                if (response.ok) {
                    console.log('Items added to cart successfully');
                    window.location.href = '/cart'; // Redirect to cart page
                } else {
                    console.error('Error adding items to cart:', await response.text());
                }
            } catch (error) {
                console.error('Error:', error);
            }
        });
    } else {
        console.error('Button with ID "bundle-cart-btn" not found');
    }
});

function updateBundleNames() {
    const nameElements = [
        document.getElementById('b-name1'),
        document.getElementById('b-name2'),
        document.getElementById('b-name3'),
        document.getElementById('b-name4')
    ];

    nameElements.forEach((element, index) => {
        if (element) {
            if (index < bundleProducts.length) {
                element.textContent = bundleProducts[index].productName;
            } else {
                element.textContent = ''; // Clear the text if no product at this index
            }
        }
    });
}

function updateBundleSizes() {
    const sizeElements = [
        document.getElementById('b-size1'),
        document.getElementById('b-size2'),
        document.getElementById('b-size3'),
        document.getElementById('b-size4')
    ];

    sizeElements.forEach((element, index) => {
        if (element) {
            if (index < bundleProducts.length) {
                element.textContent = bundleProducts[index].productSize;
            } else {
                element.textContent = ''; // Clear the text if no product at this index
            }
        }
    });
}











</script>


<script src="{{ 'main.js' | asset_url }}"></script>

{% schema %}
  {
  "name": "all-products",
  "settings": [
    {
      "type": "image_picker",
      "id": "theme_img",
      "label": "Theme Image"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "collection",
       "id" : "collection_id",
       "label": "collection"
    }
  ],
  "presets": [{
    "name": "all-products"
  }]
}

  {% endschema %}
  
